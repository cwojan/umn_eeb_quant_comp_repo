---
title: "Functionals with purrr"
---

Now that we've written a function, let's use it efficiently with functionals. Functionals are functions that take other functions as one of their arguments, and then can apply that function a number of times or to a range of values (much like a loop!). Base R has the "apply" family of functionals, including lapply and sapply, but I've found those difficult to learn because they have inconsistent syntax and behavior. Instead, we will use the "map" functionals from the "purrr" package. It's part of the tidyverse, so you likely already have it installed. If not, use this code:

```{r}
#| eval: false

install.packages("purrr")

```

Now, we can load the package, and make sure we have our fake plant data and quick_t_test function in our environment.

```{r}
library(purrr)

plant_data <- data.frame(treatment = rep(c("control","drought"), each = 30),
                         height_cm = rnorm(n = 60, mean = rep(c(12,8), each = 30), sd = 2),
                         dry_biomass_g = rnorm(60, mean = rep(c(50, 40), each = 30), sd = 6),
                         seed_mass_mg = rnorm(60, mean = rep(c(30, 20), each = 30), sd = 4))

quick_t_test <- function(dat, treatment, measurement){
  ## do t test
  test_result <- t.test(dat[,measurement] ~ dat[,treatment])
  ## pull out summary
  clean_result <- data.frame(mean_diff = diff(test_result$estimate),
                           ci_lwr = test_result$conf.int[1],
                           ci_upr = test_result$conf.int[2],
                           p_val = test_result$p.value)
  ## return the clean_result as output from the function
  return(clean_result)
}
```

### The Basic map Functional

Now let's use the map functional to iterate our quick_t_test function over each of our dependent variables. We simply provide it what we want to iterate over and then we provide the function we want it to do as arguments. Let's go over a simple example first, making vectors of randomly generated numbers of different lengths, 1 through 5.

```{r}
map_results <- map(.x = 1:5, ## iterate over .x
                   .f = rnorm) ## and do .f

## we get a list of vectors
map_results
```

One thing that is implicitly going on here is that 1:5 is being plugged into the first argument of rnorm by default, which is the number of observations to generate. The mean and sd default to 0 and 1 respectively (as indicated in the help doc for rnorm). However, our function has three arguments with no defaults, so we will need to supply those arguments and values in the map functional to do a quick t test for each of three variables:

```{r}
## quick t test each dependent variable
ttest_results <- map(.x = c("height_cm", "dry_biomass_g", "seed_mass_mg"),
                     .f = quick_t_test,
                     dat = plant_data, treatment = "treatment")

## show results
ttest_results
```

However, this list isn't super nice to look at. We could bind the rows into a data frame (with list_rbind or dplyr::bind_rows), or we could just made a data frame in the first place with map_dfr, which will always output a data frame (well, a tibble). Note that map_dfr is technically "superseded" because it requires the dplyr package to be installed, but it still works fine if you do.

```{r}
## quick t test each dependent variable
ttest_df <- map_dfr(.x = c("height_cm", "dry_biomass_g", "seed_mass_mg"),
                    .f = quick_t_test,
                    dat = plant_data, treatment = "treatment")

## show results
ttest_df
```

Much nicer right? (just ignore those row names, we could remove them if we wanted). There are map functions that specifically output all sorts of data structures, like vectors of specific data types (e.g., map_chr for strings, map_int for integers). There is even a map functional that provides no output but iteratively performs a function: walk(). You could use walk when you want to iteratively draw plots or save files.

One thing that is also helpful is that you can write a function withing a map functional, if you just need to do something over and over again but don't need to use the function elsewhere. So we could have done this:

```{r}
ttest_df2 <- map_dfr(.x = c("height_cm", "dry_biomass_g", "seed_mass_mg"),
                     .f = function(x){
                       ## do t test
                       test_result <- t.test(plant_data[,x] ~ 
                                             plant_data[,"treatment"])
                       ## pull out summary
                       clean_result <- data.frame(mean_diff = diff(test_result$estimate),
                                                  ci_lwr = test_result$conf.int[1],
                                                  ci_upr = test_result$conf.int[2],
                                                  p_val = test_result$p.value)
                       ## return the clean_result as output from the function
                       return(clean_result)
                      })
```

### Iterating over Two Ranges with map2

You can also iterate over two ranges of values with map2 functionals, or many with pmap functionals. Let's try it with our data by calculating the covariance between each pair of our dependent variables (there are likely other functions for this, but again, this is just a demo):

```{r}

## first let's find the pairs of our variables with combn
var_coms <- combn(x = c("height_cm", "dry_biomass_g", "seed_mass_mg"), m = 2)
var_coms

## we can use the two rows as our iterating ranges

## use map2_dbl to coerce to numeric vector
var_covs <- map2_dbl(.x = var_coms[1,], .y = var_coms[2,],
                     .f = function(x, y){ ## use a wrapper function to set the data frame
                      cov(plant_data[,x], plant_data[y])
                     })
var_covs
```

Here we didn't just use "cov" because we wanted to pull the data from the plant_data data frame, so we used a "wrapper" function so that we could more precisely set the arguments of cov().

We can put all of our info together like so:

```{r}
plant_covs <- data.frame(var1 = var_coms[1,],
                         var2 = var_coms[2,],
                         cov = var_covs)

plant_covs
```

We could have also plugged the map functional right into our data.frame construction. If you are familiar with dplyr and use mutate, you can mutate new columns using map as well!

### Concluding Remarks (that sounds too formal...)

Since the above demonstrations are relatively simple, you may be skeptical of the advantages of writing custom functions to iterate with functionals like map. And if you prefer to use loops, just use loops! You can do a lot of cool stuff with for loops. However, I think it's always nice to add more techniques to your "coding toolbox," as you can solve more problems.

Particularly, as your code gets more complex and interconnected, and your project gets larger, functions and functionals can really come in handy for keeping things organized. For example, I have a simulation project where I have a function to generate simulated landscapes, functions to look at those landscapes, a function to simulate animal movement over those landscapes, and a function that applies parasitic interactions with those animals (the animal movement function is called within this function). This way I can pinpoint where bugs might be easily and transfer my landscape generation or movement functions to other projects. Perhaps most importantly, I can use map to try generating landscapes and simulating movement under a range of different parameters. This general organizational concept could be applied to more analytical projects where you are aalyzing and plotting different datasets in different ways.

In the end, you have the most important opinion on how you code, so try using functionals and see how they can be best integrated into your coding!

If you'd like to learn more than this shallow introduction, check this link out:

<https://purrr.tidyverse.org/>
