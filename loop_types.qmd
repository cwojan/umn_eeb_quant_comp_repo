---
title: "Types of Loops"
---

The first method of iteration that most people learn is looping, or using flow control to rerun a block of code some number of times, or over a range of values. Many of you will be familiar with this, so we will just review it a bit.

R has different type of loops, including **for**, **while**, and **repeat**.

### for loops

for loops are the most commonly used loop, as they are versatile to many contexts. They generally follow the form:

```{r}
#| eval: false

for (indexing_variable in range_of_values) {
  some_function(some_argument = indexing_variable)
}
```

In the first line, an indexing variable is created to keep track of iterations, and it iterates through the range of values provided.

Then, some code is provided within brackets to be performed for each value in the range of values. Usually, the indexing variable will be referenced somehow in this code, but it doesn't need to be if you are just doing the same exact thing several times.

Here is a really silly working example:

```{r}

## square the numbers 1 through 5
for (i in 1:5) {
  print(i^2)
}

## of course you could just do this instead and get a more useable vector
(1:5)^2
```

Now let's look at a more interesting example. Let's say you are interested in the effect of some independent variable on multiple dependent variables. First let's simulate some fake data of greenhouse plant growth under two watering conditions:

```{r}
## create a data frame with 60 total plants and
## -two treatment levels, control and drought
## -plant heights, masses, and seed masses sampling from a normal distribution
plant_data <- data.frame(treatment = rep(c("control","drought"), each = 30),
                         height_cm = rnorm(n = 60, mean = rep(c(12,8), each = 30), sd = 2),
                         dry_biomass_g = rnorm(60, mean = rep(c(50, 40), each = 30), sd = 6),
                         seed_mass_g = rnorm(60, mean = rep(c(30, 20), each = 30), sd = 4))

```

Now we are probably interested in how the watering influences these variables (i.e., with a t-test), but we don't want to write the code, and then copy and paste it twice. Here's how we use a for loop:

```{r}

## create a vector of dependent variables to loop over
dep_vars <- c("height_cm", "dry_biomass_g", "seed_mass_g")

## pre allocate a list to store results
result_list <- vector(mode = "list", length = length(dep_vars))

## let's name the list as well
names(result_list) <- dep_vars

## set up a loop to iterate through variables
for (i in dep_vars) {
  ## store t test results in our list
  result_list[[i]] <- t.test(plant_data[,i] ~ plant_data[,"treatment"])
}

## check out the results!
result_list
```

When you are writing a for loop (especially ones more complex than the above), it can be helpful to first develop the code within the loop to more easily debug it. For example:

```{r}
## set the iterator variable to one of the values to be looped through
i <- dep_vars[1]

## then try coding what you want to do repeatedly
test_result <- t.test(plant_data[,i] ~ plant_data[,"treatment"])
test_result
```

This can be helpful because R, like most programming languages, is very particular about syntax. If you had tried to use the \$ operator to select columns, you would have gotten an error:

```{r}
#| eval: false

## this doesn't work because i is a character value in quotes, which is incompatible with $
t.test(plat_data$i ~ plant_data$treatment)

```

There are some "common pitfalls" to writing for loops, which I hope I have avoided here. You can read about them in more detail here:

<https://adv-r.hadley.nz/control-flow.html#common-pitfalls>

### while loops

while loops are a bit less common, but can be useful in certain contexts (mostly simulation). They follow this form:

```{r}
#| eval: false

while (some_condition == TRUE) {
  some_function()
}
```

The first line provides a conditional statement to be evaluated at each iteration, if it is met the loop will continue to run, if it is not met the loop will close.

There are two uses for while loop that I have found. The first is when there is some degree of randomness in how many iterations need to be run. Let's say for example you want to simulate a population of organisms that aggregate in groups, but you want to allow the group sizes to vary while the global population size remains the about the same. In this case, you could use a while loop:

```{r}

## first let's set the population size to 0
N <- 0

## and create an empty vector for group size
groups <- NULL

## and a counter variable
counter <- 1

## now let's start the while loop
while (N < 100) {
  ## randomly generate a group size as a pull from a poisson distribution w/ a mean of 5
  groups[counter] <- rpois(n = 1, lambda = 5)
  ## calculate total pop size
  N <- sum(groups)
  ## increase counter
  counter <- counter + 1
}
```

If you run that code multiple times, you'll see that you will end up with different numbers of groups with different numbers of members. This could be useful for simulation models or parametric bootstrapping. However, you may also notice that the total population size here isn't exactly constant. To keep it constant, you could do something like this:

```{r}

## first let's set the population size to 0
N <- 0

## and create an empty vector for group size
groups <- NULL

## and a counter variable
counter <- 1

## now let's start the while loop
while (N < 100) {
  ## calculate remaining population to fill
  to_fill <- 100 - sum(groups)
  ## randomly generate a group size as a pull from a poisson distribution w/ a mean of 5
  ## but if it is larger than the remaining population to fill, just fill it up exactly
  groups[counter] <- min(rpois(n = 1, lambda = 5), to_fill)
  ## calculate total pop size
  N <- sum(groups)
  ## increase counter
  counter <- counter + 1
}
```

Nifty!

The other use of a while loop that I have found is for a brute force algorithm. Basically, if you have do something complex but don't have the time or mental energy to figure out the precise algorithm to do it, you can do it the "stupid" way. This is basically like trying every combination on a lock until it opens. Computer scientists frown on these methods for being highly inefficient, but we are ~~computer~~ scientists. For ecology/evolution/behavior contexts, you might use a brute force while loops to try random combinations of data or sample sets of observations with many characteristics until you find a combination/set that meets highly specific criteria that you are looking for (e.g., subsampling a large dataset such that you sample randomly but also cover a wide range of treatment levels, sampling dates, etc.).

### repeat loops

repeat loops are a very basic sort of loop that simply do something over an over again until a condition is met, then they close. Here's the form:

```{r}
#| eval: false

repeat {
  some_function()
  if (some_condition == TRUE) break
}

```

To me they kind of seem like a while loop formatted differently. I suppose you could add multiple "break" points for different end conditions, but I believe you can add "break" commands to any type of loop.

Let me know if you know of cases where repeat loops are effective!
